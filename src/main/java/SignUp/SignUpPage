package SignUp;

import Person.Person;
import Start.StartPage;
import TableDataInformation.BankTableData;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import java.io.IOException;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.YearMonth;
import java.time.temporal.TemporalAdjusters;
import java.util.Properties;
import java.io.File;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static DatabaseConnection.UsersInformationDatabase.con;
import static DatabaseConnection.UsersInformationDatabase.insertRowWithPreparedStatement;
import static Person.User.*;

public class SignUpPage {
    @FXML
    ImageView nameImage;
    @FXML
    ImageView usernameImage;
    @FXML
    ImageView phoneImage;
    @FXML
    Label codeLabel;
    @FXML
    ImageView codeImage;
    @FXML
    Circle fiveCircle2;
    @FXML
    Circle fiveCircle1;
    @FXML
    Circle oneCircle1;
    @FXML
    Circle oneCircle2;
    @FXML
    Circle twoCircle1;
    @FXML
    Circle twoCircle2;
    @FXML
    Circle threeCircle1;
    @FXML
    Circle threeCircle2;
    @FXML
    Circle fourCircle1;
    @FXML
    Circle fourCircle2;
    @FXML
    TextField firstName;
    @FXML
    TextField lastName;
    @FXML
    TextField username;
    @FXML
    PasswordField password;
    @FXML
    PasswordField repeatedPassword;
    @FXML
    TextField phoneNumber;
    @FXML
    TextField email;
    @FXML
    TextField VerificationCode;
    @FXML
    Button UploadImage;
    @FXML
    Label title;
    @FXML
    Label imageTitle;
    @FXML
    Rectangle imageRect;
    @FXML
    ImageView image;
    @FXML
    ImageView photoImage;
    @FXML
    Button Back;
    @FXML
    Button firstStep;
    @FXML
    Button SecondStep;
    @FXML
    Button thirdStep;
    @FXML
    Button fourthStep;
    @FXML
    Button fifthStep;
    @FXML
    Label passError;
    @FXML
    Label repeatePassError;
    @FXML
    Label userError;
    @FXML
    Label firstNameError;
    @FXML
    Label LastNameError;
    @FXML
    Label PhoneNumber;
    @FXML
    Label EmailAddress;
    @FXML
    Label codeError;
    String code = null;
    String userName;
    String First_Name;
    String Last_Name;
    String Password;
    String Phone_Number;
    String Email;
    String profilePath;

    @FXML
    protected void onFirstStep(ActionEvent e) {
        boolean firstNameValid = isInputValid(firstName.getText());
        boolean lastNameValid = isInputValid(lastName.getText());
        if(firstNameValid && lastNameValid) {
            First_Name = firstName.getText();
            Last_Name = lastName.getText();
            firstNameError.setVisible(false);
            LastNameError.setVisible(false);
            oneCircle2.setVisible(false);
            firstStep.setVisible(false);
            nameImage.setVisible(false);
            firstName.setVisible(false);
            lastName.setVisible(false);
            title.setText("Login Essentials");
            twoCircle2.setVisible(true);
            username.setVisible(true);
            password.setVisible(true);
            repeatedPassword.setVisible(true);
            SecondStep.setVisible(true);
            usernameImage.setVisible(true);
        }
        else{
            if(!firstNameValid) firstNameError.setVisible(true);
            if(!lastNameValid) LastNameError.setVisible(true);
        }
    }
    protected boolean isInputValid(String string) {
        String regex = "^[a-zA-Z]{3,20}$";
        Pattern patten = Pattern.compile(regex);
        Matcher matcher = patten.matcher(string);
        boolean matchFound = matcher.find();
        if (matchFound) {
            return true;
        }
        return false;
    }
    @FXML
    protected void onSecondStep() throws SQLException, IOException, ClassNotFoundException {
        boolean user = isUserNamedValid(username.getText());
        boolean pass = isPasswordValid(password.getText());
        boolean repeatPass = false;
        if(password.getText().equals(repeatedPassword.getText())) repeatPass = true;
        if(user && pass && repeatPass) {
            userName = username.getText();
            Password = password.getText();
            userError.setVisible(false);
            passError.setVisible(false);
            repeatePassError.setVisible(false);
            twoCircle2.setVisible(false);
            username.setVisible(false);
            password.setVisible(false);
            repeatedPassword.setVisible(false);
            SecondStep.setVisible(false);
            usernameImage.setVisible(false);
            title.setText("Contact Information");
            threeCircle2.setVisible(true);
            email.setVisible(true);
            phoneImage.setVisible(true);
            phoneNumber.setVisible(true);
            thirdStep.setVisible(true);
        }
        else{
            if(!user) userError.setVisible(true);
            if(!pass) passError.setVisible(true);
            if(!repeatPass) repeatePassError.setVisible(true);
        }
    }
    protected boolean isPasswordValid(String pass) throws SQLException {
        String regex = "^[a-zA-Z0-9]{5,10}$";
        Pattern patten = Pattern.compile(regex);
        Matcher matcher = patten.matcher(pass);
        boolean matchFound = matcher.find();
        boolean truePass1 = false;
        boolean truePass2 = true;
        if (matchFound) {
            truePass1=true;
        }
//        Statement xs = con.createStatement();
//        ResultSet x = xs.executeQuery("select * from BitFUM.UsersInfo");
//        while (x.next()){
//            if(pass.equals(x.getString("password"))) truePass2=false;
//        }
        if(truePass2 && truePass1)return true;
        else return false;
    }
    protected boolean isUserNamedValid(String pass) throws SQLException, IOException, ClassNotFoundException {
        String regex = "^[a-zA-Z0-9]{5,10}$";
        Pattern patten = Pattern.compile(regex);
        Matcher matcher = patten.matcher(pass);
        boolean matchFound = matcher.find();
        boolean truePass1 = false;
        boolean truePass2 = true;
        if (matchFound) {
            truePass1=true;
        }
        if(sendString(username.getText()+password.getText(), 3)==true) truePass2=true;
        if(truePass2 && truePass1)return true;
        else return false;
    }
    @FXML
    protected void onThirdStep() {
        boolean emailValid = isEmailValid(email.getText());
        boolean phoneNumberValid = isPhoneNumberValid(phoneNumber.getText());
        if(emailValid && phoneNumberValid) {
            Phone_Number = phoneNumber.getText();
            Email = email.getText();
            sendEmail(email.getText());
            PhoneNumber.setVisible(false);
            EmailAddress.setVisible(false);
            threeCircle2.setVisible(false);
            email.setVisible(false);
            phoneImage.setVisible(false);
            phoneNumber.setVisible(false);
            thirdStep.setVisible(false);
            title.setText("Verification Code");
            fourthStep.setVisible(true);
            fourCircle2.setVisible(true);
            codeImage.setVisible(true);
            codeLabel.setVisible(true);
            VerificationCode.setVisible(true);
        }
        else{
            if(!emailValid) EmailAddress.setVisible(true);
            if(!phoneNumberValid) PhoneNumber.setVisible(true);
        }
    }
    protected boolean isPhoneNumberValid(String phone) {
        String regex = "^09[0-9]{9}$";
        Pattern patten = Pattern.compile(regex);
        Matcher matcher = patten.matcher(phone);
        boolean matchFound = matcher.find();
        if (matchFound) {
            return true;
        }
        return false;
    }
    protected boolean isEmailValid(String email) {
        String regex = "^[a-zA-Z0-9.]{1,30}@[a-z0-9.]{1,8}(.)[a-z]{1,4}$";
        Pattern patten = Pattern.compile(regex);
        Matcher matcher = patten.matcher(email);
        boolean matchFound = matcher.find();
        if (matchFound) {
            return true;
        }
        return false;
    }
    public void sendEmail(String emailAddress){
        // Sender's email address
        String senderEmail = "tshtrynftmh@gmail.com";
        String senderPassword = "xqiz jaax rzke wtvw"; // Your Gmail password

        // Receiver's email address
        String receiverEmail = emailAddress;

        // SMTP server configuration
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        // Create a session with authentication
        Session session = Session.getInstance(props, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(senderEmail, senderPassword);
            }
        });

        try {
            // Create a default MimeMessage object
            Message message = new MimeMessage(session);

            // Set From: header field of the header
            message.setFrom(new InternetAddress(receiverEmail));

            // Set To: header field of the header
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(receiverEmail));

            // Set Subject: header field
            message.setSubject("JavaMail API Test");
            Random random = new Random();
            int randomNumber;
            char randomChar=' ';
            code="";
            for(int i=0; i<5; i++) {
                boolean isNumber = random.nextBoolean();
                if (isNumber) {
                    randomNumber = random.nextInt(8) + 0;
                    code += String.valueOf(randomNumber);
                } else {
                    randomChar = (char) (random.nextInt(26) + 'A');
                    code += String.valueOf(randomChar);
                }
            }
            // Now set the actual message
            message.setText(code);
            System.out.println("send to email : ="+code);

            // Send message
            Transport.send(message);

            System.out.println("Email sent successfully.");
        } catch (MessagingException e) {
            System.out.println("Failed to send email. Error: " + e.getMessage());
        }
    }
    @FXML
    protected void onForthStep() {
        boolean errorCode = false;
        if(code.equals(VerificationCode.getText())) errorCode = true;
        if(errorCode) {
            codeError.setVisible(false);
            fourthStep.setVisible(false);
            fourCircle2.setVisible(false);
            codeImage.setVisible(false);
            codeLabel.setVisible(false);
            VerificationCode.setVisible(false);
            title.setText("Profile Picture");
            fiveCircle2.setVisible(true);
            fifthStep.setVisible(true);
            imageRect.setVisible(true);
            image.setVisible(true);
            imageTitle.setVisible(true);
            UploadImage.setVisible(true);
            photoImage.setVisible(true);
        }
        else codeError.setVisible(true);
    }
    @FXML
    protected void onFifthStep() throws IOException {
        int YEAR_LENGTH = 4;
        int MONTH_LENGTH = 2;
        int DAY_LENGTH = 2;
        int RANDOM_NUMBER_LENGTH = 4;
        StringBuilder WalletID = new StringBuilder();

        String yearString = String.format("%04d", LocalDate.now().getYear());
        WalletID.append(yearString.substring(0, YEAR_LENGTH));
        WalletID.append(" ");

        String monthString = String.format("%02d", YearMonth.now().getMonthValue());
        WalletID.append(monthString.substring(0, MONTH_LENGTH));

        String dayString = String.format("%02d",LocalDate.now().getDayOfMonth());
        WalletID.append(dayString.substring(0, DAY_LENGTH));
        WalletID.append(" ");

        Random random = new Random();
        int randomNumber = random.nextInt((int) Math.pow(10,RANDOM_NUMBER_LENGTH));
        String randomNumberString = String.valueOf(randomNumber);
        WalletID.append(randomNumberString);
        WalletID.append(" ");
        int randomNumber2 = random.nextInt((int) Math.pow(10, RANDOM_NUMBER_LENGTH));
        String randomNumberString2 = String.valueOf(randomNumber2);
        WalletID.append(randomNumberString2);
        if(profilePath == null) {
            profilePath = "/Users/haniyashahroidnejad/IdeaProjects/BitFUM1/src/main/resources/icons/profile.png";
        }
        Person newUser = new Person(userName,First_Name,Last_Name, Password, Phone_Number, Email, profilePath, WalletID.toString());
        sendObject(newUser);
        generateBankAccount();
        StartPage.switchPages.ChangePageByClickingButton(fifthStep,"/Login/LoginPage.fxml");
    }
    public void generateBankAccount(){
        int YEAR_LENGTH = 4;
        int RANDOM_NUMBER_LENGTH = 4;
        StringBuilder cardID = new StringBuilder();
        int cvv;
        Date EndDate;
        String yearString = String.format("%04d", LocalDate.now().getYear());
        cardID.append(yearString.substring(0, YEAR_LENGTH));
        cardID.append(" ");
        Random random = new Random();
        int randomNumber = random.nextInt((int) Math.pow(10,RANDOM_NUMBER_LENGTH));
        String randomNumberString = String.valueOf(randomNumber);
        cardID.append(randomNumberString);
        cardID.append(" ");
        int randomNumber2 = random.nextInt((int) Math.pow(10, RANDOM_NUMBER_LENGTH));
        String randomNumberString2 = String.valueOf(randomNumber2);
        cardID.append(randomNumberString2);
        cardID.append(" ");
        int randomNumber3 = random.nextInt((int) Math.pow(10, RANDOM_NUMBER_LENGTH));
        String randomNumberString3 = String.valueOf(randomNumber3);
        cardID.append(randomNumberString3);
        //////////////////////////////////////
        cvv=random.nextInt(9000)+1000;
        //////////////////////////////////////
        LocalDate currentDate = LocalDate.now();
        int yearsToAdd = 5;
        LocalDate randomDate = currentDate.plusYears(yearsToAdd);

        int randomMonth = randomDate.getMonth().getValue() + new Random().nextInt(12);

        if (randomMonth > 12) {
            randomMonth -= 12;
        }
        randomDate = randomDate.withMonth(randomMonth);
        randomDate = randomDate.with(TemporalAdjusters.firstDayOfMonth());
        //////////////////////////////////////
        double amount = random.nextDouble()*50000 + 5000;
        BankTableData tableData = new BankTableData(userName,First_Name, Last_Name,cardID.toString(),cvv,Date.valueOf(randomDate),Email,amount);
        sendInsertBankDataBase(tableData);
    }

    @FXML
    private void handleUploadButtonAction() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.getExtensionFilters().add(
                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg")
        );

        // Get the Stage from the button to show the file chooser
        Stage stage = (Stage) UploadImage.getScene().getWindow();
        File selectedFile = fileChooser.showOpenDialog(stage);

        if (selectedFile != null) {
            profilePath = selectedFile.getPath();
            Image image1 = new Image(selectedFile.toURI().toString());
            image.setImage(image1);
            imageRect.setVisible(false);
            UploadImage.setVisible(false);
        }else {
            profilePath = "/Users/haniyashahroidnejad/IdeaProjects/BitFUM1/src/main/resources/icons/profile.png";
        }
    }

    @FXML
    private void onPreviousButton(){
        if(title.getText().equals("Login Essentials")){
            oneCircle2.setVisible(true);
            firstStep.setVisible(true);
            nameImage.setVisible(true);
            firstName.setVisible(true);
            lastName.setVisible(true);
            title.setText("Identity Details");
            twoCircle2.setVisible(false);
            username.setVisible(false);
            password.setVisible(false);
            repeatedPassword.setVisible(false);
            SecondStep.setVisible(false);
            usernameImage.setVisible(false);
        }
        else if(title.getText().equals("Contact Information")){
            threeCircle2.setVisible(false);
            email.setVisible(false);
            phoneImage.setVisible(false);
            phoneNumber.setVisible(false);
            thirdStep.setVisible(false);
            title.setText("Login Essentials");
            twoCircle2.setVisible(true);
            username.setVisible(true);
            password.setVisible(true);
            repeatedPassword.setVisible(true);
            SecondStep.setVisible(true);
            usernameImage.setVisible(true);
        }
        else if(title.getText().equals("Verification Code")){
            fourthStep.setVisible(false);
            fourCircle2.setVisible(false);
            codeImage.setVisible(false);
            codeLabel.setVisible(false);
            VerificationCode.setVisible(false);
            title.setText("Contact Information");
            threeCircle2.setVisible(true);
            email.setVisible(true);
            phoneImage.setVisible(true);
            phoneNumber.setVisible(true);
            thirdStep.setVisible(true);
        }
        else if(title.getText().equals("Profile Picture")) {
            fiveCircle2.setVisible(false);
            fifthStep.setVisible(false);
            imageRect.setVisible(false);
            image.setVisible(false);
            imageTitle.setVisible(false);
            UploadImage.setVisible(false);
            photoImage.setVisible(false);
            title.setText("Verification Code");
            fourthStep.setVisible(true);
            fourCircle2.setVisible(true);
            codeImage.setVisible(true);
            codeLabel.setVisible(true);
            VerificationCode.setVisible(true);
        }
    }

    @FXML
    private void ONBackButton() throws IOException {
        StartPage.switchPages.ChangePageByClickingButton(Back,"/Login/LoginPage.fxml");
    }
}
